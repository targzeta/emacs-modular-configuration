;;; emacs-modular-configuration.el --- making modular your config file

;; Copyright (C) 2014 Emanuele Tomasi <targzeta@gmail.com>

;; This program is free software: you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;; This file is NOT part of GNU Emacs.

;; Author: Emanuele Tomasi <targzeta@gmail.com>
;; Version: 0.1
;; URL: https://github.com/targzeta/emacs-modular-configuration
;; Maintainer: Emanuele Tomasi <targzeta@gmail.com>
;; Keywords: modular, config

;;; Commentary:

;;; Code:

;; Definitions
;;;###autoload
(defgroup emacs-modular-configuration nil
  "Making modular your config file."
  :version "0.1"
  :prefix "emc")

(defvar emc-version "0.1")

;; Customization
;;;###autoload
(defcustom emc-config-directory "~/.emacs.d/config"
  "Directory tree that contains all your configuration files."
  :type 'directory
  :group 'emacs-modular-configuration)

;;;###autoload
(defcustom emc-config-file "~/.emacs.d/config.el"
  "File where all your configuration files will be merged."
  :type 'file
  :group 'emacs-modular-configuration)

;; Functions
(defun emc-recursive-directory (directory function)
  "Execute FUNCTION for every files under DIRECTORY tree."
  (let (dirs-list (list))
    (dolist (element (directory-files-and-attributes directory))
      (let* ((path (car element))
             (fullpath (concat directory "/" path))
             (isdir (car (cdr element)))
             (ignore-dir (or (string= path ".") (string= path ".."))))
        (cond
         ((and (eq isdir t) (not ignore-dir))
          (push fullpath dirs-list))
         ((eq isdir nil)
          (funcall function fullpath)))))
    (dolist (dir dirs-list)
      (emc-recursive-directory dir function))))

;;;###autoload
(defun emc-merge-config-files ()
  "Merge all `.el' files under `emc-config-directory' on `emc-config-file'.
Whereupon, the `emc-config-file' will also byte-compiled"
  (interactive)
  (let ((files_list)
        (header (concat
                 ";; -*- eval: (read-only-mode 1) -*-\n\n"
                 ";; " emc-config-file " -- Emacs configurations\n\n"
                 ";; Generated by Emacs Modular Configuration version "
                 emc-version "\n"
                 ";; DO NOT EDIT THIS FILE.\n"
                 ";; Edit the files under '" emc-config-directory
                 "' directory tree, \n"
                 ";; then run within emacs"
                 " 'M-x emc-merge-config-files'\n\n"))
        (footer (concat
                 ";; " emc-config-file " ends here"))
        (separator (concat ";; " (make-string 76 ?#))))

    (emc-recursive-directory emc-config-directory
                             (lambda (filename)
                               (if (string= (substring filename -3) ".el")
                                   (push filename files_list))))
    (with-temp-buffer
      (insert header)
      (dolist (filename (reverse files_list))
        (message "%s" (concat "[emc] Merging " filename))
        (insert (concat separator "\n;; Config file: " filename "\n"))
        (insert-file-contents filename)
        (goto-char (point-max))
        (insert (concat separator "\n\n\n")))
      (insert footer)
      (write-file emc-config-file))
    (byte-compile-file emc-config-file)))

(provide 'emacs-modular-configuration)
;;; emacs-modular-configuration.el ends here
